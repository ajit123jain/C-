Reserved Keyboards 
asm, auto, bool, break, case, catch, char, class, const, const_cast, continue, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, operator, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_cast, struct, switch, template, this, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while

and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, xor_eq

C++ is Case Sensitive 


Constants 
#define PI 3.14 

a = 2 + (b = 5);
a = b = c = 5;
a = (b=3, b+2); Comma operator
Bitwise & | ^ ~ <<  >>
a sizeof(char) = 1 
cout << "First sentence." << endl; for explicitly new line.
cin >> a >> b;
getline (cin, mystr); for Statement 
We need the data type we request not any other else.

After using sstream library 
 string mystr ("1204");
int myint;
stringstream(mystr) >> myint;

 for ( n=0, i=100 ; n!=i ; n++, i-- ) {
// whatever here...
}

Exit Function
void exit (int exitcode);


Function params bu reference.
When a variable is passed by reference we are not passing a copy of its value, but we are somehow passing the variable itself to the function and any modification that we do to the local variables will have an effect in their counterpart variables passed as arguments in the call to the function.

Method Overloading
Notice that a function cannot be overloaded only by its return type. At least one of its parameters must have a different type.

inline Function 
inline type name ( arguments ... ) { instructions ... }

Recursivity 

Decalration of Function 
int protofunction (int first, int second);

Compund Datatype:
int billy [5] = { 16, 2, 77, 40, 12071 };
int billy [] = { 16, 2, 77, 40, 12071 };

billy[0] = a;
billy[a] = 75;
b = billy [a+2]; billy[billy[a]] = billy[2] + 5;

We have just seen that a variable which stores a reference to another variable is called a pointer. Pointers are said to "point to" the variable whose reference they store.

• & is the reference operator and can be read as "address of"
• * is the dereference operator and can be read as "value pointed by"


Good Morning Anindya Chanda,
I was forgot to send you the Crossotel Test User credentials.
URL:  https://app.crossotel.com/
Email: user@mailinator.com
Password:  Password@test

Please have look at this and let me know your feedback.
Thanks & Regards 
Ajit Jain 
